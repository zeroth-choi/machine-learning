{
  
    
        "post0": {
            "title": "Jupyter Notebook 사용법",
            "content": "Table of Contents . 1&nbsp;&nbsp;Jupyter Notebook명령어1.1&nbsp;&nbsp;Jupyter Notebook 홈 화면 명령어 | 1.2&nbsp;&nbsp;In order to list all installed modules, run in Anaconda Prompt : | 1.3&nbsp;&nbsp;Command mode | 1.4&nbsp;&nbsp;Edit mode | 1.5&nbsp;&nbsp;공용 단축키 (현재 Notebook에 대하여) | 1.6&nbsp;&nbsp;shell (명령 프롬프트) 이용 | . | 2&nbsp;&nbsp;Markdown 명령어2.1&nbsp;&nbsp;heading | 2.2&nbsp;&nbsp;줄바꿈 | 2.3&nbsp;&nbsp;폰트 | 2.4&nbsp;&nbsp;가로줄 | 2.5&nbsp;&nbsp;인용 | 2.6&nbsp;&nbsp;목록 | 2.7&nbsp;&nbsp;링크와 이미지 | 2.8&nbsp;&nbsp;수식 | 2.9&nbsp;&nbsp;표 | 2.10&nbsp;&nbsp;코드 | . | 3&nbsp;&nbsp;객체3.1&nbsp;&nbsp;객체 | 3.2&nbsp;&nbsp;객체의 내용(DocString) | 3.3&nbsp;&nbsp;함수의 docstring | 3.4&nbsp;&nbsp;함수의 소스 코드 | 3.5&nbsp;&nbsp;wildcard(*)로 객체 검색하기 | 3.6&nbsp;&nbsp;Tab 키를 이용한 자동 완성 | 3.7&nbsp;&nbsp;변수의 상태 | . | 4&nbsp;&nbsp;코드 저장4.1&nbsp;&nbsp;한글을 포함하는 Jupyter notebook 전체를 PDF 파일로 저장하기 | 4.2&nbsp;&nbsp;Jupyter notebook 전체를 python script로 저장하기 | 4.3&nbsp;&nbsp;save several cells as a python script | 4.4&nbsp;&nbsp;python script를 Jupyter notebook으로 변환하기 | 4.5&nbsp;&nbsp;script file의 전체 내용을 한 셀에 불러오기 | 4.6&nbsp;&nbsp;Jupyter notebooks를 합치기 | . | 5&nbsp;&nbsp;실행5.1&nbsp;&nbsp;매직 명령어 | 5.2&nbsp;&nbsp;명령어의 실행 시간 측정하기(여러 번 실행하여 빨랐던 몇 번에 대한 평균) | 5.3&nbsp;&nbsp;스크립트 파일 실행 (automagic이 활성화 되어 있으면 % 생략 가능) | 5.4&nbsp;&nbsp;오류가 발생한 경우에 사후 분석 디버깅(pdb) | 5.5&nbsp;&nbsp;스크립트에 디버거(pdb) 실행 | . | . 참고: Jupyter Notebook Users Manual . Jupyter Notebook&#47749;&#47161;&#50612; . Jupyter Notebook &#54856; &#54868;&#47732; &#47749;&#47161;&#50612; . 키 설명 . New &gt; Python 3 | Python 3 notebook 생성 | . New &gt; Text Folder | folder 생성 | . New &gt; Text File | script 파일 생성 | . New &gt; Terminal | Anaconda 프롬프트 열기 | . Quit | 서버 종료 | . Logout | (PW 필요) | . In order to list all installed modules, run in Anaconda Prompt : . pip list . or . pip freeze . or . conda list . !conda list . # packages in environment at C: ide anaconda3: # # Name Version Build Channel _anaconda_depends 2020.07 py38_0 _ipyw_jlab_nb_ext_conf 0.1.0 py38_0 _r-mutex 1.0.0 anacondar_1 absl-py 0.11.0 pypi_0 pypi alabaster 0.7.12 py_0 anaconda custom py38_1 anaconda-client 1.7.2 py38_0 anaconda-navigator 1.10.0 py38_0 anaconda-project 0.9.1 pyhd3eb1b0_1 appdirs 1.4.4 py_0 argh 0.26.2 py38_0 argon2-cffi 20.1.0 py38he774522_1 asn1crypto 1.4.0 py_0 astroid 2.4.2 py38_0 astropy 4.2 py38h2bbff1b_0 astunparse 1.6.3 pypi_0 pypi async_generator 1.10 py_0 atomicwrites 1.4.0 py_0 attrs 20.3.0 pyhd3eb1b0_0 autopep8 1.5.4 py_0 babel 2.9.0 pyhd3eb1b0_0 backcall 0.2.0 py_0 backports 1.0 pyhd3eb1b0_2 backports.functools_lru_cache 1.6.1 pyhd3eb1b0_0 backports.shutil_get_terminal_size 1.0.0 pyhd3eb1b0_3 backports.tempfile 1.0 pyhd3eb1b0_1 backports.weakref 1.0.post1 py_1 bcrypt 3.2.0 py38he774522_0 beautifulsoup4 4.9.3 pyha847dfd_0 bitarray 1.6.3 py38h2bbff1b_1 bkcharts 0.2 py38_0 black 19.10b0 py_0 blas 1.0 mkl bleach 3.2.3 pyhd3eb1b0_0 blosc 1.20.1 h7bd577a_0 bokeh 2.2.3 py38_0 boto 2.49.0 py38_0 bottleneck 1.3.2 py38h2a96729_1 brotli 1.0.9 ha925a31_2 brotlipy 0.7.0 py38h2bbff1b_1003 bzip2 1.0.8 he774522_0 ca-certificates 2021.1.19 haa95532_0 cachetools 4.2.1 pypi_0 pypi certifi 2020.12.5 py38haa244fe_1 conda-forge cffi 1.14.4 py38hcd4344a_0 chardet 4.0.0 py38haa95532_1003 charls 2.1.0 h33f27b4_2 click 7.1.2 pyhd3eb1b0_0 cloudpickle 1.6.0 py_0 clyent 1.2.2 py38_1 colorama 0.4.4 pyhd3eb1b0_0 comtypes 1.1.8 py38haa95532_1002 conda 4.9.2 py38haa244fe_0 conda-forge conda-build 3.21.4 py38haa95532_0 conda-env 2.6.0 1 conda-package-handling 1.7.2 py38h76e460a_0 conda-verify 3.4.2 py_1 console_shortcut 0.1.1 4 contextlib2 0.6.0.post1 py_0 cryptography 3.3.1 py38hcd4344a_0 curl 7.71.1 h2a8f88b_1 cycler 0.10.0 py38_0 cython 0.29.21 py38hd77b12b_0 cytoolz 0.11.0 py38he774522_0 dask 2021.1.1 pyhd3eb1b0_0 dask-core 2021.1.1 pyhd3eb1b0_0 decorator 4.4.2 py_0 defusedxml 0.6.0 py_0 diff-match-patch 20200713 py_0 distributed 2021.1.1 py38haa95532_1 docutils 0.16 py38_1 entrypoints 0.3 py38_0 et_xmlfile 1.0.1 py_1001 fastcache 1.1.0 py38he774522_0 filelock 3.0.12 pyhd3eb1b0_1 flake8 3.8.4 py_0 flask 1.1.2 py_0 flatbuffers 1.12 pypi_0 pypi freetype 2.10.4 hd328e21_0 fsspec 0.8.3 py_0 future 0.18.2 py38_1 gast 0.3.3 pypi_0 pypi get_terminal_size 1.0.0 h38e98db_0 gevent 21.1.1 py38h2bbff1b_1 giflib 5.2.1 h62dcd97_0 glob2 0.7 pyhd3eb1b0_0 gmpy2 2.0.8 py38h7edee0f_3 google-auth 1.24.0 pypi_0 pypi google-auth-oauthlib 0.4.2 pypi_0 pypi google-pasta 0.2.0 pypi_0 pypi greenlet 0.4.17 py38he774522_0 grpcio 1.32.0 pypi_0 pypi h5py 2.10.0 py38h5e291fa_0 hdf5 1.10.4 h7ebc959_0 heapdict 1.0.1 py_0 html5lib 1.1 py_0 icc_rt 2019.0.0 h0cc432a_1 icu 58.2 ha925a31_3 idna 2.10 pyhd3eb1b0_0 imagecodecs 2021.1.11 py38h5da4933_1 imageio 2.9.0 py_0 imagesize 1.2.0 py_0 importlib-metadata 2.0.0 py_1 importlib_metadata 2.0.0 1 iniconfig 1.1.1 pyhd3eb1b0_0 intel-openmp 2020.2 254 intervaltree 3.1.0 py_0 ipykernel 5.3.4 py38h5ca1d4c_0 ipyparallel 6.3.0 pypi_0 pypi ipython 7.20.0 pypi_0 pypi ipython_genutils 0.2.0 pyhd3eb1b0_1 ipywidgets 7.6.3 pyhd3eb1b0_1 isort 5.6.4 py_0 itsdangerous 1.1.0 py_0 jdcal 1.4.1 py_0 jedi 0.17.2 py38haa95532_1 jinja2 2.11.2 pyhd3eb1b0_0 joblib 1.0.0 pyhd3eb1b0_0 jpeg 9b hb83a4c4_2 json5 0.9.5 py_0 jsonschema 3.2.0 py_2 jupyter 1.0.0 py38_7 jupyter-contrib-nbextensions 0.5.1 pypi_0 pypi jupyter-highlight-selected-word 0.2.0 pypi_0 pypi jupyter-latex-envs 1.4.6 pypi_0 pypi jupyter_client 6.1.7 py_0 jupyter_console 6.2.0 py_0 jupyter_contrib_core 0.3.3 py_2 conda-forge jupyter_core 4.7.0 py38haa95532_0 jupyter_nbextensions_configurator 0.4.1 py38haa244fe_2 conda-forge jupyterlab 2.2.6 py_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 1.2.0 py_0 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 keras 2.4.3 pypi_0 pypi keras-preprocessing 1.1.2 pypi_0 pypi keyring 22.0.1 py38haa95532_0 kiwisolver 1.3.0 py38hd77b12b_0 krb5 1.18.2 hc04afaa_0 lazy-object-proxy 1.4.3 py38h2bbff1b_2 lcms2 2.11 hc51a39a_0 lerc 2.2.1 hd77b12b_0 libaec 1.0.4 h33f27b4_1 libarchive 3.4.2 h5e25573_0 libcurl 7.71.1 h2a8f88b_1 libdeflate 1.7 h2bbff1b_5 libiconv 1.15 h1df5818_7 liblief 0.10.1 ha925a31_0 libllvm9 9.0.1 h21ff451_0 libpng 1.6.37 h2a8f88b_0 libsodium 1.0.18 h62dcd97_0 libspatialindex 1.9.3 h33f27b4_0 libssh2 1.9.0 h7a1dbc1_1 libtiff 4.1.0 h56a325e_1 libxml2 2.9.10 hb89e7f3_3 libxslt 1.1.34 he774522_0 libzopfli 1.0.3 ha925a31_0 llvmlite 0.34.0 py38h1a82afc_4 locket 0.2.1 py38haa95532_1 lxml 4.6.2 py38h9b66d53_0 lz4-c 1.9.3 h2bbff1b_0 lzo 2.10 he774522_2 m2w64-bwidget 1.9.10 2 m2w64-bzip2 1.0.6 6 m2w64-expat 2.1.1 2 m2w64-fftw 3.3.4 6 m2w64-flac 1.3.1 3 m2w64-gcc-libgfortran 5.3.0 6 m2w64-gcc-libs 5.3.0 7 m2w64-gcc-libs-core 5.3.0 7 m2w64-gettext 0.19.7 2 m2w64-gmp 6.1.0 2 m2w64-gsl 2.1 2 m2w64-libiconv 1.14 6 m2w64-libjpeg-turbo 1.4.2 3 m2w64-libogg 1.3.2 3 m2w64-libpng 1.6.21 2 m2w64-libsndfile 1.0.26 2 m2w64-libsodium 1.0.10 2 m2w64-libtiff 4.0.6 2 m2w64-libvorbis 1.3.5 2 m2w64-libwinpthread-git 5.0.0.4634.697f757 2 m2w64-libxml2 2.9.3 4 m2w64-mpfr 3.1.4 4 m2w64-openblas 0.2.19 1 m2w64-pcre 8.38 2 m2w64-speex 1.2rc2 3 m2w64-speexdsp 1.2rc3 3 m2w64-tcl 8.6.5 3 m2w64-tk 8.6.5 3 m2w64-tktable 2.10 5 m2w64-wineditline 2.101 5 m2w64-xz 5.2.2 2 m2w64-zeromq 4.1.4 2 m2w64-zlib 1.2.8 10 markdown 3.3.3 pypi_0 pypi markupsafe 1.1.1 py38he774522_0 matplotlib 3.3.2 haa95532_0 matplotlib-base 3.3.2 py38hba9282a_0 mccabe 0.6.1 py38_1 menuinst 1.4.16 py38he774522_1 mistune 0.8.4 py38he774522_1000 mkl 2020.2 256 mkl-service 2.3.0 py38h196d8e1_0 mkl_fft 1.2.0 py38h45dec08_0 mkl_random 1.1.1 py38h47e9c7a_0 mock 4.0.3 pyhd3eb1b0_0 more-itertools 8.6.0 pyhd3eb1b0_0 mpc 1.1.0 h7edee0f_1 mpfr 4.0.2 h62dcd97_1 mpir 3.0.0 hec2e145_1 mpmath 1.1.0 py38_0 msgpack-python 1.0.1 py38h59b6b97_0 msys2-conda-epoch 20160418 1 multipledispatch 0.6.0 py38_0 mypy_extensions 0.4.3 py38_0 navigator-updater 0.2.1 py38_0 nbclient 0.5.1 py_0 nbconvert 6.0.7 py38_0 nbformat 5.1.2 pyhd3eb1b0_1 nest-asyncio 1.4.3 pyhd3eb1b0_0 networkx 2.5 py_0 nltk 3.5 py_0 nose 1.3.7 pyhd3eb1b0_1006 notebook 6.2.0 py38haa95532_0 numba 0.51.2 py38hf9181ef_1 numexpr 2.7.2 py38hcbcaa1e_0 numpy 1.18.5 pypi_0 pypi numpy-base 1.19.2 py38ha3acd2a_0 numpydoc 1.1.0 pyhd3eb1b0_1 oauthlib 3.1.0 pypi_0 pypi olefile 0.46 py_0 openjpeg 2.3.0 h5ec785f_1 openpyxl 3.0.6 pyhd3eb1b0_0 openssl 1.1.1j h2bbff1b_0 opt-einsum 3.3.0 pypi_0 pypi packaging 20.8 pyhd3eb1b0_0 pandas 1.2.1 py38hf11a4ad_0 pandoc 2.11 h9490d1a_0 pandocfilters 1.4.3 py38haa95532_1 paramiko 2.7.2 py_0 parso 0.7.0 py_0 partd 1.1.0 py_0 path 15.0.1 py38haa95532_0 path.py 12.5.0 0 pathlib2 2.3.5 py38haa95532_2 pathspec 0.7.0 py_0 pathtools 0.1.2 py_1 patsy 0.5.1 py38_0 pep8 1.7.1 py38_0 pexpect 4.8.0 pyhd3eb1b0_3 pickleshare 0.7.5 pyhd3eb1b0_1003 pillow 8.1.0 py38h4fa10fc_0 pip 20.3.3 py38haa95532_0 pkginfo 1.7.0 py38haa95532_0 pluggy 0.13.1 py38_0 ply 3.11 py38_0 powershell_shortcut 0.0.1 3 prometheus_client 0.9.0 pyhd3eb1b0_0 prompt-toolkit 3.0.8 py_0 prompt_toolkit 3.0.8 0 protobuf 3.14.0 pypi_0 pypi psutil 5.7.2 py38he774522_0 ptyprocess 0.7.0 pyhd3eb1b0_2 py 1.10.0 pyhd3eb1b0_0 py-lief 0.10.1 py38ha925a31_0 pyasn1 0.4.8 pypi_0 pypi pyasn1-modules 0.2.8 pypi_0 pypi pycodestyle 2.6.0 py_0 pycosat 0.6.3 py38h2bbff1b_0 pycparser 2.20 py_2 pycurl 7.43.0.6 py38h7a1dbc1_0 pydocstyle 5.1.1 py_0 pyerfa 1.7.1.1 py38h2bbff1b_1 pyfirmata 1.1.0 pypi_0 pypi pyflakes 2.2.0 py_0 pygments 2.7.4 pyhd3eb1b0_0 pyinputplus 0.2.12 pypi_0 pypi pylint 2.6.0 py38_0 pyls-black 0.4.6 hd3eb1b0_0 pyls-spyder 0.3.0 pyhd3eb1b0_0 pynacl 1.4.0 py38h62dcd97_1 pyodbc 4.0.30 py38ha925a31_0 pyopenssl 20.0.1 pyhd3eb1b0_1 pyparsing 2.4.7 pyhd3eb1b0_0 pyqt 5.9.2 py38ha925a31_4 pyreadline 2.1 py38_1 pyrsistent 0.17.3 py38he774522_0 pyserial 3.4 pypi_0 pypi pysimplevalidate 0.2.12 pypi_0 pypi pysocks 1.7.1 py38haa95532_0 pytables 3.6.1 py38ha5be198_0 pytest 6.2.2 py38haa95532_2 python 3.8.5 h5fd99cc_1 python-dateutil 2.8.1 py_0 python-jsonrpc-server 0.4.0 py_0 python-language-server 0.36.2 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_0 python_abi 3.8 1_cp38 conda-forge pytz 2020.5 pyhd3eb1b0_0 pywavelets 1.1.1 py38he774522_2 pywin32 227 py38he774522_1 pywin32-ctypes 0.2.0 py38_1000 pywinpty 0.5.7 py38_0 pyyaml 5.4.1 py38h2bbff1b_1 pyzmq 20.0.0 py38hd77b12b_1 qdarkstyle 2.8.1 py_0 qt 5.9.7 vc14h73c81de_0 qtawesome 1.0.1 py_0 qtconsole 4.7.7 py_0 qtpy 1.9.0 py_0 r-askpass 1.0 r36_0 r r-assertthat 0.2.1 r36h6115d3f_0 r r-backports 1.1.4 r36h6115d3f_0 r r-base 3.6.1 hf18239d_1 r r-base64enc 0.1_3 r36h6115d3f_4 r r-bh 1.69.0_1 r36h6115d3f_0 r r-boot 1.3_20 r36h6115d3f_0 r r-broom 0.5.2 r36h6115d3f_0 r r-callr 3.2.0 r36h6115d3f_0 r r-caret 6.0_83 r36h6115d3f_0 r r-cellranger 1.1.0 r36h6115d3f_0 r r-class 7.3_15 r36h6115d3f_0 r r-cli 1.1.0 r36h6115d3f_0 r r-clipr 0.6.0 r36h6115d3f_0 r r-cluster 2.0.8 r36h6115d3f_0 r r-codetools 0.2_16 r36h6115d3f_0 r r-colorspace 1.4_1 r36h6115d3f_0 r r-crayon 1.3.4 r36h6115d3f_0 r r-curl 3.3 r36h6115d3f_0 r r-data.table 1.12.2 r36h6115d3f_0 r r-dbi 1.0.0 r36h6115d3f_0 r r-dbplyr 1.4.0 r36h6115d3f_0 r r-dichromat 2.0_0 r36h6115d3f_4 r r-digest 0.6.18 r36h6115d3f_0 r r-dplyr 0.8.0.1 r36h6115d3f_0 r r-ellipsis 0.1.0 r36h6115d3f_0 r r-essentials 3.6.0 r36_0 r r-evaluate 0.13 r36h6115d3f_0 r r-fansi 0.4.0 r36h6115d3f_0 r r-forcats 0.4.0 r36h6115d3f_0 r r-foreach 1.4.4 r36h6115d3f_0 r r-foreign 0.8_71 r36h6115d3f_0 r r-formatr 1.6 r36h6115d3f_0 r r-fs 1.2.7 r36h6115d3f_0 r r-generics 0.0.2 r36h6115d3f_0 r r-ggplot2 3.1.1 r36h6115d3f_0 r r-glmnet 2.0_16 r36h6115d3f_0 r r-glue 1.3.1 r36h6115d3f_0 r r-gower 0.2.0 r36h6115d3f_0 r r-gtable 0.3.0 r36h6115d3f_0 r r-haven 2.1.0 r36h6115d3f_0 r r-hexbin 1.27.2 r36h6115d3f_0 r r-highr 0.8 r36h6115d3f_0 r r-hms 0.4.2 r36h6115d3f_0 r r-htmltools 0.3.6 r36h6115d3f_0 r r-htmlwidgets 1.3 r36h6115d3f_0 r r-httpuv 1.5.1 r36h6115d3f_0 r r-httr 1.4.0 r36h6115d3f_0 r r-ipred 0.9_8 r36h6115d3f_0 r r-irdisplay 0.7.0 r36h6115d3f_0 r r-irkernel 0.8.15 r36_0 r r-iterators 1.0.10 r36h6115d3f_0 r r-jsonlite 1.6 r36h6115d3f_0 r r-kernsmooth 2.23_15 r36h6115d3f_4 r r-knitr 1.22 r36h6115d3f_0 r r-labeling 0.3 r36h6115d3f_4 r r-later 0.8.0 r36h6115d3f_0 r r-lattice 0.20_38 r36h6115d3f_0 r r-lava 1.6.5 r36h6115d3f_0 r r-lazyeval 0.2.2 r36h6115d3f_0 r r-lubridate 1.7.4 r36h6115d3f_0 r r-magrittr 1.5 r36h6115d3f_4 r r-maps 3.3.0 r36h6115d3f_0 r r-markdown 0.9 r36h6115d3f_0 r r-mass 7.3_51.3 r36h6115d3f_0 r r-matrix 1.2_17 r36h6115d3f_0 r r-mgcv 1.8_28 r36h6115d3f_0 r r-mime 0.6 r36h6115d3f_0 r r-modelmetrics 1.2.2 r36h6115d3f_0 r r-modelr 0.1.4 r36h6115d3f_0 r r-munsell 0.5.0 r36h6115d3f_0 r r-nlme 3.1_139 r36h6115d3f_0 r r-nnet 7.3_12 r36h6115d3f_0 r r-numderiv 2016.8_1 r36h6115d3f_0 r r-openssl 1.3 r36h6115d3f_0 r r-pbdzmq 0.3_3 r36h6115d3f_0 r r-pillar 1.3.1 r36h6115d3f_0 r r-pkgconfig 2.0.2 r36h6115d3f_0 r r-plogr 0.2.0 r36h6115d3f_0 r r-plyr 1.8.4 r36h6115d3f_0 r r-prettyunits 1.0.2 r36h6115d3f_0 r r-processx 3.3.0 r36h6115d3f_0 r r-prodlim 2018.04.18 r36h6115d3f_0 r r-progress 1.2.0 r36h6115d3f_0 r r-promises 1.0.1 r36h6115d3f_0 r r-ps 1.3.0 r36h6115d3f_0 r r-purrr 0.3.2 r36h6115d3f_0 r r-quantmod 0.4_14 r36h6115d3f_0 r r-r6 2.4.0 r36h6115d3f_0 r r-randomforest 4.6_14 r36h6115d3f_0 r r-rbokeh 0.6.3 r36_0 r r-rcolorbrewer 1.1_2 r36h6115d3f_0 r r-rcpp 1.0.1 r36h6115d3f_0 r r-rcpproll 0.3.0 r36h6115d3f_0 r r-readr 1.3.1 r36h6115d3f_0 r r-readxl 1.3.1 r36h6115d3f_0 r r-recipes 0.1.5 r36h6115d3f_0 r r-recommended 3.6.0 r36_0 r r-rematch 1.0.1 r36h6115d3f_0 r r-repr 0.19.2 r36h6115d3f_0 r r-reprex 0.2.1 r36h6115d3f_0 r r-reshape2 1.4.3 r36h6115d3f_0 r r-rlang 0.3.4 r36h6115d3f_0 r r-rmarkdown 1.12 r36h6115d3f_0 r r-rpart 4.1_15 r36h6115d3f_0 r r-rstudioapi 0.10 r36h6115d3f_0 r r-rvest 0.3.3 r36h6115d3f_0 r r-scales 1.0.0 r36h6115d3f_0 r r-selectr 0.4_1 r36h6115d3f_0 r r-shiny 1.3.2 r36h6115d3f_0 r r-sourcetools 0.1.7 r36h6115d3f_0 r r-spatial 7.3_11 r36h6115d3f_4 r r-squarem 2017.10_1 r36h6115d3f_0 r r-stringi 1.4.3 r36h6115d3f_0 r r-stringr 1.4.0 r36h6115d3f_0 r r-survival 2.44_1.1 r36h6115d3f_0 r r-sys 3.2 r36h6115d3f_0 r r-tibble 2.1.1 r36h6115d3f_0 r r-tidyr 0.8.3 r36h6115d3f_0 r r-tidyselect 0.2.5 r36h6115d3f_0 r r-tidyverse 1.2.1 r36h6115d3f_0 r r-timedate 3043.102 r36h6115d3f_0 r r-tinytex 0.12 r36h6115d3f_0 r r-ttr 0.23_4 r36h6115d3f_0 r r-utf8 1.1.4 r36h6115d3f_0 r r-uuid 0.1_2 r36h6115d3f_4 r r-viridislite 0.3.0 r36h6115d3f_0 r r-whisker 0.3_2 r36h6115d3f_4 r r-withr 2.1.2 r36h6115d3f_0 r r-xfun 0.6 r36h6115d3f_0 r r-xml2 1.2.0 r36h6115d3f_0 r r-xtable 1.8_4 r36h6115d3f_0 r r-xts 0.11_2 r36h6115d3f_0 r r-yaml 2.2.0 r36h6115d3f_0 r r-zoo 1.8_5 r36h6115d3f_0 r regex 2020.11.13 py38h2bbff1b_0 requests 2.25.1 pyhd3eb1b0_0 requests-oauthlib 1.3.0 pypi_0 pypi rope 0.18.0 py_0 rsa 4.7 pypi_0 pypi rtree 0.9.4 py38h21ff451_1 ruamel_yaml 0.15.87 py38he774522_1 scikit-image 0.17.2 py38h1e1f486_0 scikit-learn 0.23.2 py38h47e9c7a_0 scipy 1.5.2 py38h14eb087_0 seaborn 0.11.1 pyhd3eb1b0_0 selenium 3.141.0 pypi_0 pypi send2trash 1.5.0 pyhd3eb1b0_1 setuptools 52.0.0 py38haa95532_0 simplegeneric 0.8.1 py38_2 singledispatch 3.4.0.3 py_1001 sip 4.19.13 py38ha925a31_0 six 1.15.0 py38haa95532_0 snappy 1.1.8 h33f27b4_0 snowballstemmer 2.1.0 pyhd3eb1b0_0 sortedcollections 2.1.0 pyhd3eb1b0_0 sortedcontainers 2.3.0 pyhd3eb1b0_0 soupsieve 2.1 pyhd3eb1b0_0 sphinx 3.4.3 pyhd3eb1b0_0 sphinxcontrib 1.0 py38_1 sphinxcontrib-applehelp 1.0.2 py_0 sphinxcontrib-devhelp 1.0.2 py_0 sphinxcontrib-htmlhelp 1.0.3 py_0 sphinxcontrib-jsmath 1.0.1 py_0 sphinxcontrib-qthelp 1.0.3 py_0 sphinxcontrib-serializinghtml 1.1.4 py_0 sphinxcontrib-websupport 1.2.4 py_0 spyder 4.2.0 py38haa95532_0 spyder-kernels 1.10.1 py38haa95532_0 sqlalchemy 1.3.21 py38h2bbff1b_0 sqlite 3.33.0 h2a8f88b_0 statsmodels 0.12.1 py38h2bbff1b_0 stdiomask 0.0.6 pypi_0 pypi sympy 1.7.1 py38haa95532_0 tbb 2020.3 h74a9793_0 tblib 1.7.0 py_0 tensorboard 2.4.1 pypi_0 pypi tensorboard-plugin-wit 1.8.0 pypi_0 pypi tensorflow 2.4.1 pypi_0 pypi tensorflow-estimator 2.4.0 pypi_0 pypi termcolor 1.1.0 pypi_0 pypi terminado 0.9.2 py38haa95532_0 testpath 0.4.4 py_0 threadpoolctl 2.1.0 pyh5ca1d4c_0 three-merge 0.1.1 pyhd3eb1b0_0 tifffile 2021.1.14 pyhd3eb1b0_1 tk 8.6.10 he774522_0 toml 0.10.1 py_0 toolz 0.11.1 pyhd3eb1b0_0 tornado 6.1 py38h2bbff1b_0 tqdm 4.56.0 pyhd3eb1b0_0 traitlets 5.0.5 py_0 typed-ast 1.4.2 py38h2bbff1b_1 typing_extensions 3.7.4.3 pyh06a4308_0 ujson 4.0.2 py38hd77b12b_0 unicodecsv 0.14.1 py38_0 urllib3 1.26.3 pyhd3eb1b0_0 vc 14.2 h21ff451_1 vs2015_runtime 14.27.29016 h5e58377_2 watchdog 0.10.4 py38haa95532_0 wcwidth 0.2.5 py_0 webencodings 0.5.1 py38_1 werkzeug 1.0.1 py_0 wheel 0.36.2 pypi_0 pypi widgetsnbextension 3.5.1 py38_0 win_inet_pton 1.1.0 py38haa95532_0 win_unicode_console 0.5 py38_0 wincertstore 0.2 py38_0 winpty 0.4.3 4 wrapt 1.12.1 pypi_0 pypi xlrd 2.0.1 pyhd3eb1b0_0 xlsxwriter 1.3.7 py_0 xlwings 0.21.4 py38haa95532_0 xlwt 1.3.0 py38_0 xmltodict 0.12.0 py_0 xz 5.2.5 h62dcd97_0 yaml 0.2.5 he774522_0 yapf 0.30.0 py_0 zeromq 4.3.3 ha925a31_3 zfp 0.5.5 hd77b12b_4 zict 2.0.0 py_0 zipp 3.4.0 pyhd3eb1b0_0 zlib 1.2.11 h62dcd97_4 zope 1.0 py38_1 zope.event 4.5.0 py38_0 zope.interface 5.2.0 py38h2bbff1b_0 zstd 1.4.5 h04227a9_0 . Command mode . 셀의 테두리가 파란색 셀 입력창 외부의 아무곳을 누르면 Command mode로 바뀜 Edit mode에서 Esc를 누르면 Command mode로 바뀜 . 단축키 설명 . m | Markdown 입력창으로 변경 | . y | Code 입력창으로 변경 | . a | 현재 셀 위에 셀 추가 | . b | 현재 셀 아래에 셀 추가 | . dd | 현재 셀 삭제 | . z | 셀 제거 취소 | . c | 현재 셀 복사하기 | . shift+v | 현재 셀 위에 붙여 넣기 | . v | 현재 셀 아래에 붙여 넣기 | . shift+l | 줄 번호 표시를 토글 | . p | 명령 팔레트를 엶 | . h | 단축키 목록을 표시 | . Edit mode . 셀의 테두리가 녹색 셀 입력창을 클릭하면 Edit mode로 바뀜 Command mode에서 Enter 키를 누르면 Edit mode로 바뀜 Edit mode에서 셀에 내용을 입력할 수 있음 . 단축키 설명 . ctrl + z | undo | . ctrl + shift + z | redo | . Tab | 자동 완성 | . shift + Tab | 툴팁, 변수, 함수의 상태 표시 | . ctrl + shift + - | 커서의 위치에서 셀을 잘라 두개로 만듦 | . &#44277;&#50857; &#45800;&#52629;&#53412; (&#54788;&#51116; Notebook&#50640; &#45824;&#54616;&#50668;) . 키 설명 . 위 화살표 | 위 셀로 커서 이동 | . 아래 화살표 | 아래 셀로 커서 이동 | . ctrl + Enter | 현재 셀 실행 | . shift + Enter | 현재 셀 실행하고 다음 셀로 | . alt + Enter | 현재 셀 실행하고 아래에 셀 생성 | . Cell &gt; Run Cells | 모든 셀 순서대로 실행 | . Cell &gt; Current Outputs &gt; Clear | 현재 셀의 출력을 삭제 | . Cell &gt; All Output &gt; Clear | 모든 셀의 출력을 삭제 | . Kernel &gt; Interrupt | 실행중인 코드를 강제 종료 | . Kernel &gt; Restart | 실행중인 코드가 중지되며 커널이 재시작됨 | . Kernel &gt; Restart &amp; Clear Output | 실행중인 코드가 중지되며 실행 결과도 삭제됨 | . Kernel &gt; Restart &amp; Run All | 실행중인 코드가 중지되며 실행 결과도 삭제되고 모든 셀이 순서대로 실행됨 | . Kernel &gt; Reconnect | 인터넷 연결이 끊어졌을 때 연결을 재시도 | . Kernel &gt; Shutdown | 커널을 종료 | . File &gt; Close and Halt | 커널을 종료하고 창을 닫음 | . shell (&#47749;&#47161; &#54532;&#47212;&#54532;&#53944;) &#51060;&#50857; . !명령어 예) !pip install p2j # 패키지 설치 . Markdown &#47749;&#47161;&#50612; . heading . # 장 | ## 절 | ### 관 | #### 조 | ##### 항 | ###### 호 | . &#51460;&#48148;&#45000; . 줄이 바뀌지 않는다. 줄 끝에 빈 칸이 2개면 줄바꿈하고 새 줄이 시작된다. . 위에 빈 줄이면 새 문단이 시작된다. . &#54256;&#53944; . *italic font* : italic font _italic font_ : italic font **bold font** : bold font __bold font__ : bold font ***bold italic font*** : bold italic font ___bold italic font___ : bold italic font . subscript and superscript H~2~ ^1 ^ : H~2~^1^ ~~strikethrough~~ : strikethrough endash -- : -- emdash : ellipsis ... : ... . one space : a&nbsp;b two spaces : a&nbsp;&nbsp;b two spaces : a&nbsp; b two spaces : a&ensp;b four spaces : a&nbsp;&nbsp;&nbsp;&nbsp;b four spaces : a&nbsp; &nbsp; b four spaces : a&emsp;b . &#44032;&#47196;&#51460; . horizontal rule (위 아래 빈 줄 필요) *** 또는 ___ . . . &#51064;&#50857; . block quoting(위, 아래 빈 줄 필요) &gt;로 시작, 줄바꿈하려면 줄 끝에 빈 칸이 2개blah blah block quote blah blah block quote blah blah block quote blah blah block quote blah blah block quote blah blah block quote blah blah block quote blah blah block quote blah blah block . | . block quote block quote . block quote block quote . block quote block quote . &#47785;&#47197; . unordered list | item 2 sub-item 1 | sub-item 2 sub-sub-item 1 | sub-sub-item 2 | . | . | . ordered list | item 2 sub-item 1 1 sub-item 2 | sub-item 2 | . | item 3 sub-item 1 | sub-item 2 | . | &#47553;&#53356;&#50752; &#51060;&#48120;&#51648; . 링크 Jupyter Notebook 링크 Jupyter Notebook . 이미지 첨부하기 . drag &amp; drop으로 첨부 | ![동전 1개](coin_1.jpg) : | . &#49688;&#49885; . in-line 수식(왼쪽 $ 또는 &gt;의 오른쪽에 빈 칸 있으면 안됨) in-line 수식: $P(A|B)= frac{P(B|A)P(A)}{P(B|A)P(A)+P(B|A^C )P(A^C )}$ | in-line 수식: $P(A|B)= frac{P(B|A)P(A)}{P(B|A)P(A)+P(B|A^C )P(A^C )}$ | . | displayed 수식 $$P(A|B)= frac{P(B|A)P(A)}{P(B|A)P(A)+P(B|A^C )P(A^C )}$$ | . &#54364; . Table Header Second Header . Table Cell | Cell 2 | . Cell 3 | Cell 4 | . 수식을 포함하는 markdown 표 (표의 위, 아래 빈 줄) left-justified(regular), centered, right-justified, left-justified columns | . Header Header Header Header . Cell | Cell | Cell | Cell | . Cell | Cell | Cell | Cell | . Cell | Cell | Cell | Cell | . Cell | $x^2$ | $ int { sin x} dx$ | Cell | . 수식을 포함하는 html 표 자료 평균 분산 표준편차 특성값 . 모집단 | $ xi_1,..., xi_N$ | $ mu$ | $ sigma^2$ | $ sigma$ | 모수 | . 표본 | $x_1,...,x_n$ | $ bar{x}$ | $s^2$ | $s$ | 관측값,추정값 | . &lt;/tr&gt; 무작위표본 | $X_1,...,X_n$ | $ bar{X}$ | $S^2$ | $S$ | 통계량,추정량 | . | . &#53076;&#46300; . inline code: range(5) | inline code 출력: range(5) is *(nbextensions의 Python Markup을 Enable해야 함) | Using Markdown str = &quot;This is block level code&quot; print(str) . | Using Markup Tags python str = &quot;This is a block level code&quot; print(str) | . &#44061;&#52404; . &#44061;&#52404; . mylist = [1, 2, 3, 4.5] mylist . [1, 2, 3, 4.5] . type(mylist) . list . print(&quot;Hi&quot;) # Out[] 없음 . Hi . &#44061;&#52404;&#51032; &#45236;&#50857;(DocString) . mylist? . ?mylist . def my_add(x, y): &quot;&quot;&quot; 두 수를 더한다 입력: x, y 출력: x+y &quot;&quot;&quot; return x + y . print(my_add(5, 7)) . 12 . &#54632;&#49688;&#51032; docstring . my_add? . ?my_add . &#54632;&#49688;&#51032; &#49548;&#49828; &#53076;&#46300; . my_add?? . import numpy as np . wildcard(*)&#47196; &#44061;&#52404; &#44160;&#49353;&#54616;&#44592; . ??my_add . np.a*? . Tab &#53412;&#47484; &#51060;&#50857;&#54620; &#51088;&#46041; &#50756;&#49457; . my(Tab) . mylist.(Tab) . &#48320;&#49688;&#51032; &#49345;&#53468; . 변수의 docstring 표시 변수에 ?를 붙여 셀을 실행 | . | 변수의 tooltip 표시 변수를 입력하고 Shift+Tab을 누름 | . | &#53076;&#46300; &#51200;&#51109; . &#54620;&#44544;&#51012; &#54252;&#54632;&#54616;&#45716; Jupyter notebook &#51204;&#52404;&#47484; PDF &#54028;&#51068;&#47196; &#51200;&#51109;&#54616;&#44592; . C: ide anaconda3 pkgs nbconvert... share jupyter nbconvert templates latex base.tex.j2 파일에 다음 추가 &emsp; usepackage{kotex} File...Download as...PDF via LaTeX (.pdf) . Jupyter notebook &#51204;&#52404;&#47484; python script&#47196; &#51200;&#51109;&#54616;&#44592; . File...Download as...Python (.py) . Jupyter notebook과 같은 이름으로 다운로드 폴더에 저장됨 . save several cells as a python script . %save -r -f my_add.py 8-9 . The following commands were written to file `my_add.py`: def my_add(x, y): &#34;&#34;&#34; 두 수를 더한다 입력: x, y 출력: x+y &#34;&#34;&#34; return x + y print(my_add(5, 7)) . python script&#47484; Jupyter notebook&#51004;&#47196; &#48320;&#54872;&#54616;&#44592; . 명령프롬프트 창에서 . pip install p2j . p2j file.py . script file&#51032; &#51204;&#52404; &#45236;&#50857;&#51012; &#54620; &#49472;&#50640; &#48520;&#47084;&#50724;&#44592; . def my_add(x, y): &quot;&quot;&quot; 두 수를 더한다 입력: x, y 출력: x+y &quot;&quot;&quot; return x + y print(my_add(5, 7)) . 12 . Jupyter notebooks&#47484; &#54633;&#52824;&#44592; . 첫 셀 입력창 외부 클릭하여 Command mode(파란색 경계선)로 바꾸고 Shift-Down으로 아래 셀들을 선택(또는 처음 셀 입력창 외부 클릭, 마지막 셀 입력창 외부 Shift-Click)하고 Ctrl-C로 복사 | 붙여넣을 notebook에 빈 셀을 만들고 입력창 외부 클릭함 | Ctrl-V로 붙여넣음 | &#49892;&#54665; . &#47588;&#51649; &#47749;&#47161;&#50612; . 매직 명령어 설명 . %pwd | 현재 디렉토리 경로 출력 | . %time 명령어 | 명령어의 실행 시간을 측정하여 표시 | . %timeit 명령어 | 명령어를 여러 번 실행한 결과를 요약하여 표시 | . %ls | 현재 폴더의 파일 목록을 출력 | . %matplotlib inline | 코드 셀 바로 아래에 그래프 출력 | . %history -l 3 | 최근 3개의 코드 셀 출력 | . &#47749;&#47161;&#50612;&#51032; &#49892;&#54665; &#49884;&#44036; &#52769;&#51221;&#54616;&#44592;(&#50668;&#47084; &#48264; &#49892;&#54665;&#54616;&#50668; &#48744;&#46992;&#45912; &#47751; &#48264;&#50640; &#45824;&#54620; &#54217;&#44512;) . %timeit a = [x*x for x in np.random.randn(10000)] . 7.9 ms ± 1.19 ms per loop (mean ± std. dev. of 7 runs, 100 loops each) . %timeit a = np.random.randn(10000); a = a * a . 1.33 ms ± 172 µs per loop (mean ± std. dev. of 7 runs, 100 loops each) . &#49828;&#53356;&#47549;&#53944; &#54028;&#51068; &#49892;&#54665; (automagic&#51060; &#54876;&#49457;&#54868; &#46104;&#50612; &#51080;&#51004;&#47732; % &#49373;&#47029; &#44032;&#45733;) . !python my_add.py . 12 . !ipython my_add.py . 12 . %run my_add.py . 12 . &#50724;&#47448;&#44032; &#48156;&#49373;&#54620; &#44221;&#50864;&#50640; &#49324;&#54980; &#48516;&#49437; &#46356;&#48260;&#44613;(pdb) . p 표현식 . q 디버거 종료 . %run error.py . NameError Traceback (most recent call last) c: ide notebook error.py in &lt;module&gt; 6 if __name__ == &#34;__main__&#34;: 7 a, b = 3, 4 -&gt; 8 z = my_add(a, b) 9 print(z) c: ide notebook error.py in my_add(x, y) 1 def my_add(x, y): 2 &#34;&#34;&#34; 두 수를 더한다 &#34;&#34;&#34; -&gt; 3 out = x + z 4 return out + y 5 NameError: name &#39;z&#39; is not defined . debug . &gt; c: ide notebook error.py(3)my_add() 1 def my_add(x, y): 2 &#34;&#34;&#34; 두 수를 더한다 &#34;&#34;&#34; -&gt; 3 out = x + z 4 return out + y 5 ipdb&gt; p z *** NameError: name &#39;z&#39; is not defined ipdb&gt; p y 4 ipdb&gt; q . &#49828;&#53356;&#47549;&#53944;&#50640; &#46356;&#48260;&#44144;(pdb) &#49892;&#54665; . n 현재 줄 실행하고 다음 줄로 . r 현재 함수가 값을 리턴할 때까지 실행 . p 표현식 . q 디버거 종료 . run -d error.py . Breakpoint 1 at c: ide notebook error.py:1 NOTE: Enter &#39;c&#39; at the ipdb&gt; prompt to continue execution. &gt; c: ide notebook error.py(1)&lt;module&gt;() 1&gt; 1 def my_add(x, y): 2 &#34;&#34;&#34; 두 수를 더한다 &#34;&#34;&#34; 3 out = x + z 4 return out + y 5 ipdb&gt; n &gt; c: ide notebook error.py(6)&lt;module&gt;() 4 return out + y 5 -&gt; 6 if __name__ == &#34;__main__&#34;: 7 a, b = 3, 4 8 z = my_add(a, b) ipdb&gt; n &gt; c: ide notebook error.py(7)&lt;module&gt;() 5 6 if __name__ == &#34;__main__&#34;: -&gt; 7 a, b = 3, 4 8 z = my_add(a, b) 9 print(z) ipdb&gt; n &gt; c: ide notebook error.py(8)&lt;module&gt;() 5 6 if __name__ == &#34;__main__&#34;: 7 a, b = 3, 4 -&gt; 8 z = my_add(a, b) 9 print(z) ipdb&gt; n NameError: name &#39;z&#39; is not defined &gt; c: ide notebook error.py(8)&lt;module&gt;() 5 6 if __name__ == &#34;__main__&#34;: 7 a, b = 3, 4 -&gt; 8 z = my_add(a, b) 9 print(z) ipdb&gt; n --Return-- None &gt; c: ide notebook error.py(8)&lt;module&gt;() 5 6 if __name__ == &#34;__main__&#34;: 7 a, b = 3, 4 -&gt; 8 z = my_add(a, b) 9 print(z) ipdb&gt; n NameError: name &#39;z&#39; is not defined &gt; c: ide anaconda3 lib site-packages ipython utils py3compat.py(188)execfile() 186 with open(fname, &#39;rb&#39;) as f: 187 compiler = compiler or compile --&gt; 188 exec(compiler(f.read(), fname, &#39;exec&#39;), glob, loc) 189 190 # Refactor print statements in doctests. ipdb&gt; n --Return-- None &gt; c: ide anaconda3 lib site-packages ipython utils py3compat.py(188)execfile() 186 with open(fname, &#39;rb&#39;) as f: 187 compiler = compiler or compile --&gt; 188 exec(compiler(f.read(), fname, &#39;exec&#39;), glob, loc) 189 190 # Refactor print statements in doctests. ipdb&gt; q .",
            "url": "https://zeroth-choi.github.io/machine-learning/2021/02/24/Jupyter-Notebook-%EC%82%AC%EC%9A%A9%EB%B2%95.html",
            "relUrl": "/2021/02/24/Jupyter-Notebook-%EC%82%AC%EC%9A%A9%EB%B2%95.html",
            "date": " • Feb 24, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Python을 이용한 Iris 데이터",
            "content": "Table of Contents . 1&nbsp;&nbsp;사용하는 소프트웨어 버전 | 2&nbsp;&nbsp;붓꽃의 품종 분류2.1&nbsp;&nbsp;데이터 적재2.1.1&nbsp;&nbsp;훈련 데이터와 테스트 데이터 | . | 2.2&nbsp;&nbsp;데이터 살펴보기 | . | . &#49324;&#50857;&#54616;&#45716; &#49548;&#54532;&#53944;&#50920;&#50612; &#48260;&#51204; . import sys print(&quot;Python 버전: {}&quot;.format(sys.version)) import pandas as pd print(&quot;pandas 버전: {}&quot;.format(pd.__version__)) import matplotlib print(&quot;matplotlib 버전: {}&quot;.format(matplotlib.__version__)) import matplotlib.pyplot as plt import numpy as np print(&quot;NumPy 버전: {}&quot;.format(np.__version__)) . Python 버전: 3.8.8 (default, Feb 24 2021, 15:54:32) [MSC v.1928 64 bit (AMD64)] pandas 버전: 1.2.3 matplotlib 버전: 3.3.4 NumPy 버전: 1.19.2 . 안드레아스 뮐러, 세라 가이드, 파이썬 라이브러리를 활용한 머신러닝(Introduction to Machine Learning with Python), 한빛미디어, 2017 . &#48531;&#44867;&#51032; &#54408;&#51333; &#48516;&#47448; . &#45936;&#51060;&#53552; &#51201;&#51116; . from sklearn.datasets import load_iris iris_dataset = load_iris() . iris_dataset.keys() . dict_keys([&#39;data&#39;, &#39;target&#39;, &#39;frame&#39;, &#39;target_names&#39;, &#39;DESCR&#39;, &#39;feature_names&#39;, &#39;filename&#39;]) . list(iris_dataset.keys()) . [&#39;data&#39;, &#39;target&#39;, &#39;frame&#39;, &#39;target_names&#39;, &#39;DESCR&#39;, &#39;feature_names&#39;, &#39;filename&#39;] . print(iris_dataset[&#39;DESCR&#39;][:193] + &quot; n...&quot;) . .. _iris_dataset: Iris plants dataset -- **Data Set Characteristics:** :Number of Instances: 150 (50 in each of three classes) :Number of Attributes: 4 numeric, pre ... . print(iris_dataset[&#39;DESCR&#39;]) . .. _iris_dataset: Iris plants dataset -- **Data Set Characteristics:** :Number of Instances: 150 (50 in each of three classes) :Number of Attributes: 4 numeric, predictive attributes and the class :Attribute Information: - sepal length in cm - sepal width in cm - petal length in cm - petal width in cm - class: - Iris-Setosa - Iris-Versicolour - Iris-Virginica :Summary Statistics: ============== ==== ==== ======= ===== ==================== Min Max Mean SD Class Correlation ============== ==== ==== ======= ===== ==================== sepal length: 4.3 7.9 5.84 0.83 0.7826 sepal width: 2.0 4.4 3.05 0.43 -0.4194 petal length: 1.0 6.9 3.76 1.76 0.9490 (high!) petal width: 0.1 2.5 1.20 0.76 0.9565 (high!) ============== ==== ==== ======= ===== ==================== :Missing Attribute Values: None :Class Distribution: 33.3% for each of 3 classes. :Creator: R.A. Fisher :Donor: Michael Marshall (MARSHALL%PLU@io.arc.nasa.gov) :Date: July, 1988 The famous Iris database, first used by Sir R.A. Fisher. The dataset is taken from Fisher&#39;s paper. Note that it&#39;s the same as in R, but not as in the UCI Machine Learning Repository, which has two wrong data points. This is perhaps the best known database to be found in the pattern recognition literature. Fisher&#39;s paper is a classic in the field and is referenced frequently to this day. (See Duda &amp; Hart, for example.) The data set contains 3 classes of 50 instances each, where each class refers to a type of iris plant. One class is linearly separable from the other 2; the latter are NOT linearly separable from each other. .. topic:: References - Fisher, R.A. &#34;The use of multiple measurements in taxonomic problems&#34; Annual Eugenics, 7, Part II, 179-188 (1936); also in &#34;Contributions to Mathematical Statistics&#34; (John Wiley, NY, 1950). - Duda, R.O., &amp; Hart, P.E. (1973) Pattern Classification and Scene Analysis. (Q327.D83) John Wiley &amp; Sons. ISBN 0-471-22361-1. See page 218. - Dasarathy, B.V. (1980) &#34;Nosing Around the Neighborhood: A New System Structure and Classification Rule for Recognition in Partially Exposed Environments&#34;. IEEE Transactions on Pattern Analysis and Machine Intelligence, Vol. PAMI-2, No. 1, 67-71. - Gates, G.W. (1972) &#34;The Reduced Nearest Neighbor Rule&#34;. IEEE Transactions on Information Theory, May 1972, 431-433. - See also: 1988 MLC Proceedings, 54-64. Cheeseman et al&#34;s AUTOCLASS II conceptual clustering system finds 3 classes in the data. - Many, many more ... . print(&quot;특성의 이름: {}&quot;.format(iris_dataset[&#39;feature_names&#39;])) . 특성의 이름: [&#39;sepal length (cm)&#39;, &#39;sepal width (cm)&#39;, &#39;petal length (cm)&#39;, &#39;petal width (cm)&#39;] . print(&quot;data의 타입: {}&quot;.format(type(iris_dataset[&#39;data&#39;]))) . data의 타입: &lt;class &#39;numpy.ndarray&#39;&gt; . print(&quot;data의 크기: {}&quot;.format(iris_dataset[&#39;data&#39;].shape)) . data의 크기: (150, 4) . print(&quot;data의 처음 다섯 행: n{}&quot;.format(iris_dataset[&#39;data&#39;][:5])) . data의 처음 다섯 행: [[5.1 3.5 1.4 0.2] [4.9 3. 1.4 0.2] [4.7 3.2 1.3 0.2] [4.6 3.1 1.5 0.2] [5. 3.6 1.4 0.2]] . print(&quot;data의 셋째 처음 10개: n{}&quot;.format(iris_dataset[&#39;data&#39;][:10,2])) . data의 셋째 처음 10개: [1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5] . print(&quot;target의 타입: {}&quot;.format(type(iris_dataset[&#39;target&#39;]))) . target의 타입: &lt;class &#39;numpy.ndarray&#39;&gt; . print(&quot;타깃의 이름: {}&quot;.format(iris_dataset[&#39;target_names&#39;])) . 타깃의 이름: [&#39;setosa&#39; &#39;versicolor&#39; &#39;virginica&#39;] . print(&quot;target의 크기: {}&quot;.format(iris_dataset[&#39;target&#39;].shape)) . target의 크기: (150,) . print(&quot;타깃: n{}&quot;.format(iris_dataset[&#39;target&#39;])) . 타깃: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2] . import pandas as pd . iris_df_target = pd.DataFrame(iris_dataset.target, columns=[&#39;target&#39;]) iris_df = pd.DataFrame(iris_dataset.data, columns=iris_dataset.feature_names) iris_df_extended = pd.concat([iris_df, iris_df_target],axis=1) iris_df_extended[&#39;target&#39;]=iris_df_extended[&#39;target&#39;].map({0: &quot;setosa&quot;, 1: &quot;versicolor&quot;, 2: &quot;virginica&quot;}) . iris_df_extended.shape . (150, 5) . display(iris_df_extended.head(10)) . sepal length (cm) sepal width (cm) petal length (cm) petal width (cm) target . 0 5.1 | 3.5 | 1.4 | 0.2 | setosa | . 1 4.9 | 3.0 | 1.4 | 0.2 | setosa | . 2 4.7 | 3.2 | 1.3 | 0.2 | setosa | . 3 4.6 | 3.1 | 1.5 | 0.2 | setosa | . 4 5.0 | 3.6 | 1.4 | 0.2 | setosa | . 5 5.4 | 3.9 | 1.7 | 0.4 | setosa | . 6 4.6 | 3.4 | 1.4 | 0.3 | setosa | . 7 5.0 | 3.4 | 1.5 | 0.2 | setosa | . 8 4.4 | 2.9 | 1.4 | 0.2 | setosa | . 9 4.9 | 3.1 | 1.5 | 0.1 | setosa | . iris_df_extended.groupby(&#39;target&#39;).size() . target setosa 50 versicolor 50 virginica 50 dtype: int64 . display(iris_df.head(10)) . sepal length (cm) sepal width (cm) petal length (cm) petal width (cm) . 0 5.1 | 3.5 | 1.4 | 0.2 | . 1 4.9 | 3.0 | 1.4 | 0.2 | . 2 4.7 | 3.2 | 1.3 | 0.2 | . 3 4.6 | 3.1 | 1.5 | 0.2 | . 4 5.0 | 3.6 | 1.4 | 0.2 | . 5 5.4 | 3.9 | 1.7 | 0.4 | . 6 4.6 | 3.4 | 1.4 | 0.3 | . 7 5.0 | 3.4 | 1.5 | 0.2 | . 8 4.4 | 2.9 | 1.4 | 0.2 | . 9 4.9 | 3.1 | 1.5 | 0.1 | . display(iris_df_target.head(10)) . target . 0 0 | . 1 0 | . 2 0 | . 3 0 | . 4 0 | . 5 0 | . 6 0 | . 7 0 | . 8 0 | . 9 0 | . &#54984;&#47144; &#45936;&#51060;&#53552;&#50752; &#53580;&#49828;&#53944; &#45936;&#51060;&#53552; . from sklearn.model_selection import train_test_split validation_size = 0.25 seed = 0 X_train, X_test, y_train, y_test = train_test_split( iris_dataset[&#39;data&#39;], iris_dataset[&#39;target&#39;], test_size=validation_size, random_state=seed) . print(&quot;X_train 크기: {}&quot;.format(X_train.shape)) print(&quot;y_train 크기: {}&quot;.format(y_train.shape)) . X_train 크기: (112, 4) y_train 크기: (112,) . print(&quot;X_test 크기: {}&quot;.format(X_test.shape)) print(&quot;y_test 크기: {}&quot;.format(y_test.shape)) . X_test 크기: (38, 4) y_test 크기: (38,) . &#45936;&#51060;&#53552; &#49332;&#54196;&#48372;&#44592; . # 열의 이름은 iris_dataset.feature_names에 있는 문자열을 사용 train_df = pd.DataFrame(X_train, columns=iris_dataset.feature_names) . display(train_df.head(10)) . sepal length (cm) sepal width (cm) petal length (cm) petal width (cm) . 0 5.9 | 3.0 | 4.2 | 1.5 | . 1 5.8 | 2.6 | 4.0 | 1.2 | . 2 6.8 | 3.0 | 5.5 | 2.1 | . 3 4.7 | 3.2 | 1.3 | 0.2 | . 4 6.9 | 3.1 | 5.1 | 2.3 | . 5 5.0 | 3.5 | 1.6 | 0.6 | . 6 5.4 | 3.7 | 1.5 | 0.2 | . 7 5.0 | 2.0 | 3.5 | 1.0 | . 8 6.5 | 3.0 | 5.5 | 1.8 | . 9 6.7 | 3.3 | 5.7 | 2.5 | . train_df_target = pd.DataFrame(y_train, columns=[&quot;target&quot;]) . display(train_df_target.head(10)) . target . 0 1 | . 1 1 | . 2 2 | . 3 0 | . 4 2 | . 5 0 | . 6 0 | . 7 1 | . 8 2 | . 9 2 | . train_df_extended = train_df.join(train_df_target) . train_df_extended[&#39;target&#39;]=train_df_extended[&#39;target&#39;].map({0: &quot;setosa&quot;, 1: &quot;versicolor&quot;, 2: &quot;virginica&quot;}) . train_df_extended.shape . (112, 5) . display(train_df_extended.head(10)) . sepal length (cm) sepal width (cm) petal length (cm) petal width (cm) target . 0 5.9 | 3.0 | 4.2 | 1.5 | versicolor | . 1 5.8 | 2.6 | 4.0 | 1.2 | versicolor | . 2 6.8 | 3.0 | 5.5 | 2.1 | virginica | . 3 4.7 | 3.2 | 1.3 | 0.2 | setosa | . 4 6.9 | 3.1 | 5.1 | 2.3 | virginica | . 5 5.0 | 3.5 | 1.6 | 0.6 | setosa | . 6 5.4 | 3.7 | 1.5 | 0.2 | setosa | . 7 5.0 | 2.0 | 3.5 | 1.0 | versicolor | . 8 6.5 | 3.0 | 5.5 | 1.8 | virginica | . 9 6.7 | 3.3 | 5.7 | 2.5 | virginica | . display(train_df.describe()) . sepal length (cm) sepal width (cm) petal length (cm) petal width (cm) . count 112.000000 | 112.000000 | 112.000000 | 112.000000 | . mean 5.886607 | 3.051786 | 3.796429 | 1.223214 | . std 0.871314 | 0.436196 | 1.800697 | 0.781427 | . min 4.300000 | 2.000000 | 1.100000 | 0.100000 | . 25% 5.100000 | 2.800000 | 1.575000 | 0.300000 | . 50% 5.800000 | 3.000000 | 4.250000 | 1.300000 | . 75% 6.500000 | 3.300000 | 5.200000 | 1.900000 | . max 7.900000 | 4.400000 | 6.900000 | 2.500000 | . train_df.hist(bins=20) plt.show() . train_df.hist(column=&#39;sepal length (cm)&#39;, bins=20) plt.show() . plt.scatter(train_df[&#39;sepal length (cm)&#39;], train_df[&#39;sepal width (cm)&#39;]) plt.grid() plt.show() . train_df_extended.groupby(&#39;target&#39;).size() . target setosa 37 versicolor 34 virginica 41 dtype: int64 . train_df_extended[&#39;target&#39;].value_counts() . virginica 41 setosa 37 versicolor 34 Name: target, dtype: int64 . y_test . array([2, 1, 0, 2, 0, 2, 0, 1, 1, 1, 2, 1, 1, 1, 1, 0, 1, 1, 0, 0, 2, 1, 0, 0, 2, 0, 0, 1, 1, 0, 2, 1, 0, 2, 2, 1, 0, 1]) . np.bincount(y_test) . array([13, 16, 9], dtype=int64) . uniqueValues, occurCount = np.unique(y_test, return_counts=True) print(&#39;unique values: &#39;, uniqueValues) print(&#39;occurence Count: &#39;, occurCount) . unique values: [0 1 2] occurence Count: [13 16 9] . display(train_df_extended.groupby(&#39;target&#39;).mean()) . sepal length (cm) sepal width (cm) petal length (cm) petal width (cm) . target . setosa 4.997297 | 3.389189 | 1.454054 | 0.240541 | . versicolor 5.917647 | 2.758824 | 4.191176 | 1.308824 | . virginica 6.663415 | 2.990244 | 5.582927 | 2.039024 | . display(train_df_extended.groupby(train_df_extended.target).mean()) . sepal length (cm) sepal width (cm) petal length (cm) petal width (cm) . target . setosa 4.997297 | 3.389189 | 1.454054 | 0.240541 | . versicolor 5.917647 | 2.758824 | 4.191176 | 1.308824 | . virginica 6.663415 | 2.990244 | 5.582927 | 2.039024 | . display(train_df_extended.groupby(&#39;target&#39;).std()) . sepal length (cm) sepal width (cm) petal length (cm) petal width (cm) . target . setosa 0.354719 | 0.385706 | 0.142584 | 0.109188 | . versicolor 0.522506 | 0.338551 | 0.477600 | 0.205039 | . virginica 0.646048 | 0.342640 | 0.558973 | 0.259690 | . train_df_extended.hist(column=&#39;sepal length (cm)&#39;, by=&#39;target&#39;, bins=20) plt.show() . train_df_extended.hist(by=&#39;target&#39;) plt.show() . train_df_extended[[&quot;sepal length (cm)&quot;, &quot;target&quot;]].boxplot(by=&#39;target&#39;) plt.tight_layout(pad=3, h_pad=1) plt.xlabel(&quot;class&quot;) plt.ylabel(&quot;cm&quot;) plt.show() . train_df_extended[[&quot;sepal width (cm)&quot;, &quot;target&quot;]].boxplot(by=&#39;target&#39;) plt.tight_layout(pad=3, h_pad=1) plt.xlabel(&quot;class&quot;) plt.ylabel(&quot;cm&quot;) plt.show() . train_df_extended[[&quot;petal length (cm)&quot;, &quot;target&quot;]].boxplot(by=&#39;target&#39;) plt.tight_layout(pad=3, h_pad=1) plt.xlabel(&quot;class&quot;) plt.ylabel(&quot;cm&quot;) plt.show() . train_df_extended[[&quot;petal width (cm)&quot;, &quot;target&quot;]].boxplot(by=&#39;target&#39;) plt.tight_layout(pad=3, h_pad=1) plt.xlabel(&quot;class&quot;) plt.ylabel(&quot;cm&quot;) plt.show() . train_df_extended.boxplot(by=&#39;target&#39;, figsize=(10, 8)) plt.tight_layout(pad=3, h_pad=1) plt.show() . import seaborn as sns sns.scatterplot(x=&#39;sepal length (cm)&#39;, y=&#39;sepal width (cm)&#39;, hue=&#39;target&#39;, # different colors by group style=&#39;target&#39;, # different shapes by group data=train_df_extended) plt.grid() plt.show() . sns.pairplot(train_df_extended, diag_kind=&#39;kde&#39;, # or hist hue=&quot;target&quot;, palette=&#39;bright&#39;) plt.show() . pd.plotting.scatter_matrix(train_df, c=y_train, figsize=(15, 15), marker=&#39;o&#39;, hist_kwds={&#39;bins&#39;: 20}, s=60, alpha=.8) plt.show() # 보라=0, 파랑=1, 노랑=2 .",
            "url": "https://zeroth-choi.github.io/machine-learning/python/jupyter/iris/visualization/2020/09/04/Visualizing_Iris_in_Python.html",
            "relUrl": "/python/jupyter/iris/visualization/2020/09/04/Visualizing_Iris_in_Python.html",
            "date": " • Sep 4, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://zeroth-choi.github.io/machine-learning/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "Indjst",
            "content": "include the figures | . Capacitance of Two Overlapping Conducting Spheres . Je-Young Choi Department of Smart IT, U1 University, Asan 31415, Korea . jychoi@u1.ac.kr . Abstract . Objectives: We calculate the capacitance of two conducting spheres which are partially overlapping. . Methods: Two sequences of image charges are needed to make the surfaces of the conductors equipotential by the method of images. For some special contact angles the number of image charges is finite and they are located inside the unphysical region (that is, the conducting spheres). . Findings: We obtain the closed-form expressions for the charges and positions of the image charges for some special contact angles from which any physical quantities including the capacitance is calculated. . Application: The result can be applicable to estimating the capacitances of some biological cells and nanoparticles. . Keywords: Capacitance, Conducting Sphere, Method of Images, Surface Charge Density . 1. Introduction . Capacitors are one of passive elements used in electric and electronic circuits. Their capacitances depend only on the geometry of conductors and are usually calculated for parallel-plate, cylindrical, and spherical capacitors1. But in dealing with parallel-plate and cylindrical capacitors with finite sizes their edge effects are neglected. Spherical capacitor consisting of concentric conducting spheres is special in that its size is finite from the start and its exact capacitance can be calculated easily. Recently capacitors consisting of a pair of conducting spheres whose centers do not coincide have been discussed where one surface is located inside another surface with different centers or one is located outside another2-4. . Here we consider the situation where two conductors with spherical surfaces (S_{a}) and (S_{b}) of radii (a) and (b), respectively are partially overlapping. We want to calculate the capacitance of the combined conductor using the method of images in the next section. . 2. Two overlapping conducting spheres . . Figure 1. The surfaces ( mathbf{S}{ mathbf{a}}) and ( mathbf{S}{ mathbf{b}}) have radii ( mathbf{a}) and ( mathbf{b}), respectively. The contact angle is ( mathbf{ theta = pi/N}). Image charges ( mathbf{q}{ mathbf{n + 1}}) at ( mathbf{x =} mathbf{x}{ mathbf{n + 1}}) and ({ bar{ mathbf{q}}}{ mathbf{n}}) at ( mathbf{x =}{ bar{ mathbf{x}}}{ mathbf{n}}) are shown. Here ( mathbf{b = 1.5} mathbf{a}) and ( mathbf{N = 3}) are chosen for definiteness. . The center of one conducting sphere is chosen as the origin of the coordinate system (see Figure 1). The other conducting sphere has its center at (x = s) on the positive (x) axis and its surface crosses the positive (x)-axis at (x = s - b). The separation between the centers of the two spheres is (s) with ( | a - b | &lt; s leq a + b). | . The problem is to make their electric potential held at a constant value (V). The method of images5 is to simulate the boundary condition with suitably placed point charges with finite magnitudes inside the unphysical region surrounded (S_{a}) and (S_{b}). An image charge (q_{1}) at the origin (x_{1} = 0) makes the surface (S_{a}) equipotential. But then (S_{b}) is not equipotential any more so that an image charges ({ bar{q}}{1}) of (q{1}) with respect to (S_{b}) is required to make the potential on (S_{b}) due to charges (q_{1}) and ({ bar{q}}{1}) vanishing. Now ({ bar{q}}{1}) is not located at the center of (S_{a}) and breaks the equipotential condition of (S_{a}). Thus an image charge (q_{2}) of ({ bar{q}}{1}) with respect to (S{a})is introduced to make (S_{a}) equipotential. This process continues indefinitely in order to make the surfaces (S_{a}) and (S_{b}) each equipotential, requiring two infinite sequences (q_{1},q_{2}, ldots) and ({ bar{q}}{1},{ bar{q}}{2}, ldots) of image charges. All the image charges lie on the (x)-axis. In Figure 1 solid dots represent charges with the same sign as (q_{1}) while open dots represent those with the opposite sign to (q_{1}). . The image of the charge (q_{n}) at (x = x_{n}) with respect to (S_{b}) is given by .   [{ bar{q}}{n} = - frac{b}{s - x{n}} , q_{n} ,,] (1) .   | [{ bar{x}}{n} = s - frac{b^{2}}{s - x{n}} ,.] | (2) | . Similarly, the image of the charge ({ bar{q}}{n}) at (x = { bar{x}}{n}) with respect to (S_{a}) is given by .   [q_{n + 1} = - frac{a}{n}} ,{ bar{q}}{n} ,,] (3) .   | [x_{n + 1} = frac{a^{2}}_{n}} ,.] | (4) | . From equation (1) with (n) replaced with (n + 1) gives . [{ bar{q}}{n + 1} = - frac{b}{s - x{n + 1}} , q_{n + 1}] . [= frac{ text{ab}}{(s - x_{n + 1}){ bar{x}}{n}} ,{ bar{q}}{n}] .       .   | [= frac{ text{b }x_{n + 1}}{a(s - x_{n + 1})} ,{ bar{q}}_{n} ,,] | (5) | . where equations (3) and (4) have been used. Equation (5) is then solved for (x_{n + 1}), yielding .       .   | [ frac{s}{x_{n + 1}} = 1 + frac{ text{b }{ bar{q}}{n}}{ text{a }{ bar{q}}{n + 1}} ,.] | (6) | . Eliminating ({ bar{x}}_{n}) by combining equations (4) and (2) gives .       .   | [ frac{a^{2}}{x_{n + 1}} = s - frac{b^{2}}{s - x_{n}} ,.] | (7) | . If equation (6) is substituted into equation (7), then we obtain a 2nd-order difference equation for (1/{ bar{q}}_{n}) : .       .   | [ frac{1}{n + 1}} - frac{s^{2} - a^{2} - b^{2}}{ text{ab}} frac{1}{n}} + frac{1}_{n - 1}} = 0 ,.] | (8) | . Since .       .   | [- 1 &lt; frac{s^{2} - a^{2} - b^{2}}{2ab} leq 1 ,,] | (9) | . we can define ( theta) by .       .   | [ cos theta = frac{s^{2} - a^{2} - b^{2}}{2ab}] | (10) | . with (0 leq theta &lt; pi). The angle ( theta) is shown in Figure 1. Then equation (8) becomes .       .   | [ frac{1}{n + 1}} - e^{ pm i theta} frac{1}{n}} = e^{ mp i theta} left( frac{1}{n}} - e^{ pm i theta} frac{1}{n - 1}} right)] | (11) | . with respective signs. Iterating (n - 1) times, .       .   | [ frac{1}{n + 1}} - e^{ pm i theta} frac{1}{n}} = e^{ mp i(n - 1) theta} left( frac{1}{2}} - e^{ pm i theta} frac{1}{1}} right) ,.] | (12) | . From equation (1) for (n = 1) .       .   | [{ bar{q}}{1} = - frac{b}{s} , q{1} ,.] | (13) | . and from equation (1) for (n = 2) combined with equations (4), (3), and (2), .       .   | [{ bar{q}}{2} = - frac{ text{b }q{1}}{2s , text{cos } theta} ,,] | (14) | . so that . [ frac{1}{2}} - e^{ pm theta} frac{1}{1}} = - frac{s}{b} left( 2 cos theta - e^{ pm theta} right) frac{1}{q_{1}}] .       .   | [= - frac{s}{b}e^{ mp theta} frac{1}{q_{1}} ,.] | (15) | . Hence we have .       .   | [ frac{1}{n + 1}} - e^{ pm i theta} frac{1}{n}} = - frac{s}{b}e^{ mp i text{nθ}} frac{1}{q_{1}} ,.] | (16) | . Eliminating (1/{ bar{q}}_{n + 1}) by subtracting the lower line from the upper line of equation (16) yields .       .   | [(e^{i theta} - e^{- i theta}) frac{1}{n}} = - frac{s}{b}(e^{ni theta} - e^{- ni theta}) frac{1}{q{1}}] | (17) | . from which .       .   | [{ bar{q}}{n} = - frac{b}{s} frac{ text{sin } theta}{ text{sin }n theta} , q{1} ,.] | (18) | . Other quantities such as (x_{n}), ({ bar{q}}{n}), and ({ bar{x}}{x}) can be determined as follows. First, (x_{n}) are obtained by substituting equation (21) into equation (6) to give .       .   | [x_{n} = frac{ text{as} text{sin }(n - 1) theta}{a text{sin }(n - 1) theta + b text{sin }n theta} ,.] | (19) | . Then ({ bar{x}}_{n}) are determined by equation (4) .       .   | [{ bar{x}}_{n} = frac{a lbrack a text{sin }n theta + b text{sin }(n + 1) theta rbrack}{s text{sin }n theta} ,.] | (20) | . From equation (1) (q_{n}) are obtained .       .   | [q_{n} = frac{b text{sin } theta}{b text{sin }n theta + a text{sin }(n - 1) theta} , q_{1} ,.] | (21) | . When ( theta = pi/N) for (N = 2,3, ldots), we have from equation (10) .       .   | [s = sqrt{a^{2} + b^{2} + 2ab cos( pi/N)}] | (22) | . and the periodicity .       .   | [x_{n + N} = x_{n} ,, quad{ bar{x}}{n + N} = { bar{x}}{n}] | (23) | . with .       .   | [x_{1} = 0 ,, quad x_{N} = s ,, quad{ bar{x}}_{N} = infty ,.] | (24) | . Hence a finite number of image charges are used to produce the potential in the physical region outside the conductors: (q_{n}) for (n = 1,2, ldots,N), and ({ bar{q}}_{n}) for (n = 1,2, ldots,N - 1), which are all located in the unphysical region. . For each (n) the potentials on (S_{b}) due to charges (q_{n}) and ({ bar{q}}{n}) cancel out by construction and similarly the potentials on (S{a}) due to charges (q_{n + 1}) and ({ bar{q}}{n}) do. Since (q{N} = (b/a)q_{1}) due to equation (21), the potentials on (S_{a}) and (S_{b}) are given, respectively, by . [V_{a} = frac{1}{4 pi epsilon_{0}} frac{q_{1}}{a} ,,] .       .   | [V_{b} = frac{1}{4 pi epsilon_{0}} frac{q_{N}}{b} = V_{a} ,,] | (25) | . meaning that the surfaces of the conductors are equipotential. When the potential of the conducting spheres is (V), we have .       .   | [q_{1} = 4 pi epsilon_{0} text{aV} ,.] | (26) | . . Figure 2. The capacitance ( mathbf{C}) is plotted in unit of ( mathbf{4} mathbf{ pi} mathbf{ epsilon}_{ mathbf{0}} mathbf{(a + b)}) as a function of the ratio ( mathbf{b/a}) of radii of the two conducting spheres for ( mathbf{N = 2,3,4}). For large ( mathbf{b/a}), the curves approach the value ( mathbf{1}). . The electrostatic potential at any point in the physical region is given by the image charges. The surface charge density and the total charge on each surface can be calculated from the normal derivative of the potential at the surface. More simply, the total charge on (S_{a}) and (S_{b}) is, by Gauss’s law, given by . [Q = sum_{n = 1}^{N}q_{n} + sum_{n = 1}^{N - 1}{ bar{q}}_{n}] . [= 4 pi epsilon_{0} text{abV} left lbrack sum_{n = 1}^{N} frac{ text{sin } frac{ pi}{N}}{b text{sin } frac{ text{nπ}}{N} + a text{sin } frac{(n - 1) pi}{N}} right. ] .       .   | [ quad quad quad quad quad - left. sum_{n = 1}^{N - 1} frac{ text{sin } frac{ pi}{N}}{s text{sin } frac{ text{nπ}}{N}} right rbrack ,.] | (27) | . Hence the capacitance of the ovelapping conducting spheres is . [C = Q/V] . [= 4 pi epsilon_{0} text{ab} left lbrack sum_{n = 1}^{N} frac{ text{sin } frac{ pi}{N}}{b text{sin } frac{ text{nπ}}{N} + a text{sin } frac{(n - 1) pi}{N}} right. ] .       .   | [ quad quad quad quad quad - left. sum_{n = 1}^{N - 1} frac{ text{sin } frac{ pi}{N}}{s text{sin } frac{ text{nπ}}{N}} right rbrack ,,] | (28) | . which is symmetric under the exchange of (a) and (b). The capacitance (C) in unit of (4 pi epsilon_{0}(a + b)) is plotted in Figure 2 as a function of the ratio (b/a) for three values of (N). . . Figure 3. The capacitance ( mathbf{C}) in unit of ( mathbf{4} mathbf{ pi} mathbf{ epsilon}_{ mathbf{0}} mathbf{(a + b)}) is plotted versus the contact angle ( mathbf{ theta}) in unit of ( mathbf{ pi}) for ( mathbf{N = 2,3, ldots,100}) at the ratios ( mathbf{b/a = 1.0,1,5,2.0}) of radii of the two conducting spheres. . In Figure 3, (C/ lbrack 4 pi epsilon_{0}(a + b) rbrack) at (b/a = 1.0,1.5,2.0) is depicted as a function of ( theta) in unit of ( pi) for (N = 2,3, ldots,100). Even though the capacitance (C) is obtained for discrete values of (N), the nature of (C) as a continuous function of ( theta) is evident. . 3. Concluding remarks . The considered the overlapping conducting spheres for the special case (N = 2). In this paper we generalized his results for any (N geq 2) where ( theta = pi/N) is the contact angle between the two spheres. The closed-form expressions for the charges and positions of the image charges were obtained from which any physical quantities including the capacitance can be calculated. . Recently, electric properties of biological cells6 and conducting nanoparticles7 have attracted interests. The present work can provide an analytical result for the capacitances of biological cells and nanoparticles with nonspherical shapes. . 4. References . Griffiths DJ. Introduction to electrodynamics. 4th ed. Pearson. 2013, pp. 105–7. . | Durand E. Électrostatique. Tome II. Paris: Masson ET Cie; 1966, pp. 207–10. . | Smythe WR. Static and dynamic electricity. 3rd ed. Bristol: Taylor &amp; Francis. 1989, pp. 128-31. . | Lekner J. Capacitance coefficients of two spheres. Journal of Electrostatics. 2011, 69 (1), pp. 11–4. . | Jackson JD. Classical electrodynamics. 3rd ed. New York: Wiley. 1998, pp. 57–64. . | Shigimaga VA. Measurements of the capacitance of a biological cell by a pulse method. Measurement Techniques. 2014, 57 (2), pp. 213–7. . | Allagui A, Alami AH, Baranova EA, Wüthrich R. Size-dependent capacitance of NiO nanoparticles synthesized with cathodic contact glow discharge electrolysis. Journal of Power Sources. 2014, 262, pp. 178–82. . |",
            "url": "https://zeroth-choi.github.io/machine-learning/2020/01/31/indjst.html",
            "relUrl": "/2020/01/31/indjst.html",
            "date": " • Jan 31, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://zeroth-choi.github.io/machine-learning/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://zeroth-choi.github.io/machine-learning/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://zeroth-choi.github.io/machine-learning/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}