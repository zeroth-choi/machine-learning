{
  
    
        "post0": {
            "title": "Python을 이용한 Iris 데이터",
            "content": "Table of Contents . 1&nbsp;&nbsp;사용하는 소프트웨어 버전 | 2&nbsp;&nbsp;붓꽃의 품종 분류2.1&nbsp;&nbsp;데이터 적재2.1.1&nbsp;&nbsp;훈련 데이터와 테스트 데이터 | . | 2.2&nbsp;&nbsp;데이터 살펴보기 | . | . &#49324;&#50857;&#54616;&#45716; &#49548;&#54532;&#53944;&#50920;&#50612; &#48260;&#51204; . import sys print(&quot;Python 버전: {}&quot;.format(sys.version)) import pandas as pd print(&quot;pandas 버전: {}&quot;.format(pd.__version__)) import matplotlib print(&quot;matplotlib 버전: {}&quot;.format(matplotlib.__version__)) import matplotlib.pyplot as plt import numpy as np print(&quot;NumPy 버전: {}&quot;.format(np.__version__)) . Python 버전: 3.8.8 (default, Feb 24 2021, 15:54:32) [MSC v.1928 64 bit (AMD64)] pandas 버전: 1.2.3 matplotlib 버전: 3.3.4 NumPy 버전: 1.19.2 . 안드레아스 뮐러, 세라 가이드, 파이썬 라이브러리를 활용한 머신러닝(Introduction to Machine Learning with Python), 한빛미디어, 2017 . &#48531;&#44867;&#51032; &#54408;&#51333; &#48516;&#47448; . &#45936;&#51060;&#53552; &#51201;&#51116; . from sklearn.datasets import load_iris iris_dataset = load_iris() . iris_dataset.keys() . dict_keys([&#39;data&#39;, &#39;target&#39;, &#39;frame&#39;, &#39;target_names&#39;, &#39;DESCR&#39;, &#39;feature_names&#39;, &#39;filename&#39;]) . list(iris_dataset.keys()) . [&#39;data&#39;, &#39;target&#39;, &#39;frame&#39;, &#39;target_names&#39;, &#39;DESCR&#39;, &#39;feature_names&#39;, &#39;filename&#39;] . print(iris_dataset[&#39;DESCR&#39;][:193] + &quot; n...&quot;) . .. _iris_dataset: Iris plants dataset -- **Data Set Characteristics:** :Number of Instances: 150 (50 in each of three classes) :Number of Attributes: 4 numeric, pre ... . print(iris_dataset[&#39;DESCR&#39;]) . .. _iris_dataset: Iris plants dataset -- **Data Set Characteristics:** :Number of Instances: 150 (50 in each of three classes) :Number of Attributes: 4 numeric, predictive attributes and the class :Attribute Information: - sepal length in cm - sepal width in cm - petal length in cm - petal width in cm - class: - Iris-Setosa - Iris-Versicolour - Iris-Virginica :Summary Statistics: ============== ==== ==== ======= ===== ==================== Min Max Mean SD Class Correlation ============== ==== ==== ======= ===== ==================== sepal length: 4.3 7.9 5.84 0.83 0.7826 sepal width: 2.0 4.4 3.05 0.43 -0.4194 petal length: 1.0 6.9 3.76 1.76 0.9490 (high!) petal width: 0.1 2.5 1.20 0.76 0.9565 (high!) ============== ==== ==== ======= ===== ==================== :Missing Attribute Values: None :Class Distribution: 33.3% for each of 3 classes. :Creator: R.A. Fisher :Donor: Michael Marshall (MARSHALL%PLU@io.arc.nasa.gov) :Date: July, 1988 The famous Iris database, first used by Sir R.A. Fisher. The dataset is taken from Fisher&#39;s paper. Note that it&#39;s the same as in R, but not as in the UCI Machine Learning Repository, which has two wrong data points. This is perhaps the best known database to be found in the pattern recognition literature. Fisher&#39;s paper is a classic in the field and is referenced frequently to this day. (See Duda &amp; Hart, for example.) The data set contains 3 classes of 50 instances each, where each class refers to a type of iris plant. One class is linearly separable from the other 2; the latter are NOT linearly separable from each other. .. topic:: References - Fisher, R.A. &#34;The use of multiple measurements in taxonomic problems&#34; Annual Eugenics, 7, Part II, 179-188 (1936); also in &#34;Contributions to Mathematical Statistics&#34; (John Wiley, NY, 1950). - Duda, R.O., &amp; Hart, P.E. (1973) Pattern Classification and Scene Analysis. (Q327.D83) John Wiley &amp; Sons. ISBN 0-471-22361-1. See page 218. - Dasarathy, B.V. (1980) &#34;Nosing Around the Neighborhood: A New System Structure and Classification Rule for Recognition in Partially Exposed Environments&#34;. IEEE Transactions on Pattern Analysis and Machine Intelligence, Vol. PAMI-2, No. 1, 67-71. - Gates, G.W. (1972) &#34;The Reduced Nearest Neighbor Rule&#34;. IEEE Transactions on Information Theory, May 1972, 431-433. - See also: 1988 MLC Proceedings, 54-64. Cheeseman et al&#34;s AUTOCLASS II conceptual clustering system finds 3 classes in the data. - Many, many more ... . print(&quot;특성의 이름: {}&quot;.format(iris_dataset[&#39;feature_names&#39;])) . 특성의 이름: [&#39;sepal length (cm)&#39;, &#39;sepal width (cm)&#39;, &#39;petal length (cm)&#39;, &#39;petal width (cm)&#39;] . print(&quot;data의 타입: {}&quot;.format(type(iris_dataset[&#39;data&#39;]))) . data의 타입: &lt;class &#39;numpy.ndarray&#39;&gt; . print(&quot;data의 크기: {}&quot;.format(iris_dataset[&#39;data&#39;].shape)) . data의 크기: (150, 4) . print(&quot;data의 처음 다섯 행: n{}&quot;.format(iris_dataset[&#39;data&#39;][:5])) . data의 처음 다섯 행: [[5.1 3.5 1.4 0.2] [4.9 3. 1.4 0.2] [4.7 3.2 1.3 0.2] [4.6 3.1 1.5 0.2] [5. 3.6 1.4 0.2]] . print(&quot;data의 셋째 처음 10개: n{}&quot;.format(iris_dataset[&#39;data&#39;][:10,2])) . data의 셋째 처음 10개: [1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5] . print(&quot;target의 타입: {}&quot;.format(type(iris_dataset[&#39;target&#39;]))) . target의 타입: &lt;class &#39;numpy.ndarray&#39;&gt; . print(&quot;타깃의 이름: {}&quot;.format(iris_dataset[&#39;target_names&#39;])) . 타깃의 이름: [&#39;setosa&#39; &#39;versicolor&#39; &#39;virginica&#39;] . print(&quot;target의 크기: {}&quot;.format(iris_dataset[&#39;target&#39;].shape)) . target의 크기: (150,) . print(&quot;타깃: n{}&quot;.format(iris_dataset[&#39;target&#39;])) . 타깃: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2] . import pandas as pd . iris_df_target = pd.DataFrame(iris_dataset.target, columns=[&#39;target&#39;]) iris_df = pd.DataFrame(iris_dataset.data, columns=iris_dataset.feature_names) iris_df_extended = pd.concat([iris_df, iris_df_target],axis=1) iris_df_extended[&#39;target&#39;]=iris_df_extended[&#39;target&#39;].map({0: &quot;setosa&quot;, 1: &quot;versicolor&quot;, 2: &quot;virginica&quot;}) . iris_df_extended.shape . (150, 5) . display(iris_df_extended.head(10)) . sepal length (cm) sepal width (cm) petal length (cm) petal width (cm) target . 0 5.1 | 3.5 | 1.4 | 0.2 | setosa | . 1 4.9 | 3.0 | 1.4 | 0.2 | setosa | . 2 4.7 | 3.2 | 1.3 | 0.2 | setosa | . 3 4.6 | 3.1 | 1.5 | 0.2 | setosa | . 4 5.0 | 3.6 | 1.4 | 0.2 | setosa | . 5 5.4 | 3.9 | 1.7 | 0.4 | setosa | . 6 4.6 | 3.4 | 1.4 | 0.3 | setosa | . 7 5.0 | 3.4 | 1.5 | 0.2 | setosa | . 8 4.4 | 2.9 | 1.4 | 0.2 | setosa | . 9 4.9 | 3.1 | 1.5 | 0.1 | setosa | . iris_df_extended.groupby(&#39;target&#39;).size() . target setosa 50 versicolor 50 virginica 50 dtype: int64 . display(iris_df.head(10)) . sepal length (cm) sepal width (cm) petal length (cm) petal width (cm) . 0 5.1 | 3.5 | 1.4 | 0.2 | . 1 4.9 | 3.0 | 1.4 | 0.2 | . 2 4.7 | 3.2 | 1.3 | 0.2 | . 3 4.6 | 3.1 | 1.5 | 0.2 | . 4 5.0 | 3.6 | 1.4 | 0.2 | . 5 5.4 | 3.9 | 1.7 | 0.4 | . 6 4.6 | 3.4 | 1.4 | 0.3 | . 7 5.0 | 3.4 | 1.5 | 0.2 | . 8 4.4 | 2.9 | 1.4 | 0.2 | . 9 4.9 | 3.1 | 1.5 | 0.1 | . display(iris_df_target.head(10)) . target . 0 0 | . 1 0 | . 2 0 | . 3 0 | . 4 0 | . 5 0 | . 6 0 | . 7 0 | . 8 0 | . 9 0 | . &#54984;&#47144; &#45936;&#51060;&#53552;&#50752; &#53580;&#49828;&#53944; &#45936;&#51060;&#53552; . from sklearn.model_selection import train_test_split validation_size = 0.25 seed = 0 X_train, X_test, y_train, y_test = train_test_split( iris_dataset[&#39;data&#39;], iris_dataset[&#39;target&#39;], test_size=validation_size, random_state=seed) . print(&quot;X_train 크기: {}&quot;.format(X_train.shape)) print(&quot;y_train 크기: {}&quot;.format(y_train.shape)) . X_train 크기: (112, 4) y_train 크기: (112,) . print(&quot;X_test 크기: {}&quot;.format(X_test.shape)) print(&quot;y_test 크기: {}&quot;.format(y_test.shape)) . X_test 크기: (38, 4) y_test 크기: (38,) . &#45936;&#51060;&#53552; &#49332;&#54196;&#48372;&#44592; . # 열의 이름은 iris_dataset.feature_names에 있는 문자열을 사용 train_df = pd.DataFrame(X_train, columns=iris_dataset.feature_names) . display(train_df.head(10)) . sepal length (cm) sepal width (cm) petal length (cm) petal width (cm) . 0 5.9 | 3.0 | 4.2 | 1.5 | . 1 5.8 | 2.6 | 4.0 | 1.2 | . 2 6.8 | 3.0 | 5.5 | 2.1 | . 3 4.7 | 3.2 | 1.3 | 0.2 | . 4 6.9 | 3.1 | 5.1 | 2.3 | . 5 5.0 | 3.5 | 1.6 | 0.6 | . 6 5.4 | 3.7 | 1.5 | 0.2 | . 7 5.0 | 2.0 | 3.5 | 1.0 | . 8 6.5 | 3.0 | 5.5 | 1.8 | . 9 6.7 | 3.3 | 5.7 | 2.5 | . train_df_target = pd.DataFrame(y_train, columns=[&quot;target&quot;]) . display(train_df_target.head(10)) . target . 0 1 | . 1 1 | . 2 2 | . 3 0 | . 4 2 | . 5 0 | . 6 0 | . 7 1 | . 8 2 | . 9 2 | . train_df_extended = train_df.join(train_df_target) . train_df_extended[&#39;target&#39;]=train_df_extended[&#39;target&#39;].map({0: &quot;setosa&quot;, 1: &quot;versicolor&quot;, 2: &quot;virginica&quot;}) . train_df_extended.shape . (112, 5) . display(train_df_extended.head(10)) . sepal length (cm) sepal width (cm) petal length (cm) petal width (cm) target . 0 5.9 | 3.0 | 4.2 | 1.5 | versicolor | . 1 5.8 | 2.6 | 4.0 | 1.2 | versicolor | . 2 6.8 | 3.0 | 5.5 | 2.1 | virginica | . 3 4.7 | 3.2 | 1.3 | 0.2 | setosa | . 4 6.9 | 3.1 | 5.1 | 2.3 | virginica | . 5 5.0 | 3.5 | 1.6 | 0.6 | setosa | . 6 5.4 | 3.7 | 1.5 | 0.2 | setosa | . 7 5.0 | 2.0 | 3.5 | 1.0 | versicolor | . 8 6.5 | 3.0 | 5.5 | 1.8 | virginica | . 9 6.7 | 3.3 | 5.7 | 2.5 | virginica | . display(train_df.describe()) . sepal length (cm) sepal width (cm) petal length (cm) petal width (cm) . count 112.000000 | 112.000000 | 112.000000 | 112.000000 | . mean 5.886607 | 3.051786 | 3.796429 | 1.223214 | . std 0.871314 | 0.436196 | 1.800697 | 0.781427 | . min 4.300000 | 2.000000 | 1.100000 | 0.100000 | . 25% 5.100000 | 2.800000 | 1.575000 | 0.300000 | . 50% 5.800000 | 3.000000 | 4.250000 | 1.300000 | . 75% 6.500000 | 3.300000 | 5.200000 | 1.900000 | . max 7.900000 | 4.400000 | 6.900000 | 2.500000 | . train_df.hist(bins=20) plt.show() . train_df.hist(column=&#39;sepal length (cm)&#39;, bins=20) plt.show() . plt.scatter(train_df[&#39;sepal length (cm)&#39;], train_df[&#39;sepal width (cm)&#39;]) plt.grid() plt.show() . train_df_extended.groupby(&#39;target&#39;).size() . target setosa 37 versicolor 34 virginica 41 dtype: int64 . train_df_extended[&#39;target&#39;].value_counts() . virginica 41 setosa 37 versicolor 34 Name: target, dtype: int64 . y_test . array([2, 1, 0, 2, 0, 2, 0, 1, 1, 1, 2, 1, 1, 1, 1, 0, 1, 1, 0, 0, 2, 1, 0, 0, 2, 0, 0, 1, 1, 0, 2, 1, 0, 2, 2, 1, 0, 1]) . np.bincount(y_test) . array([13, 16, 9], dtype=int64) . uniqueValues, occurCount = np.unique(y_test, return_counts=True) print(&#39;unique values: &#39;, uniqueValues) print(&#39;occurence Count: &#39;, occurCount) . unique values: [0 1 2] occurence Count: [13 16 9] . display(train_df_extended.groupby(&#39;target&#39;).mean()) . sepal length (cm) sepal width (cm) petal length (cm) petal width (cm) . target . setosa 4.997297 | 3.389189 | 1.454054 | 0.240541 | . versicolor 5.917647 | 2.758824 | 4.191176 | 1.308824 | . virginica 6.663415 | 2.990244 | 5.582927 | 2.039024 | . display(train_df_extended.groupby(train_df_extended.target).mean()) . sepal length (cm) sepal width (cm) petal length (cm) petal width (cm) . target . setosa 4.997297 | 3.389189 | 1.454054 | 0.240541 | . versicolor 5.917647 | 2.758824 | 4.191176 | 1.308824 | . virginica 6.663415 | 2.990244 | 5.582927 | 2.039024 | . display(train_df_extended.groupby(&#39;target&#39;).std()) . sepal length (cm) sepal width (cm) petal length (cm) petal width (cm) . target . setosa 0.354719 | 0.385706 | 0.142584 | 0.109188 | . versicolor 0.522506 | 0.338551 | 0.477600 | 0.205039 | . virginica 0.646048 | 0.342640 | 0.558973 | 0.259690 | . train_df_extended.hist(column=&#39;sepal length (cm)&#39;, by=&#39;target&#39;, bins=20) plt.show() . train_df_extended.hist(by=&#39;target&#39;) plt.show() . train_df_extended[[&quot;sepal length (cm)&quot;, &quot;target&quot;]].boxplot(by=&#39;target&#39;) plt.tight_layout(pad=3, h_pad=1) plt.xlabel(&quot;class&quot;) plt.ylabel(&quot;cm&quot;) plt.show() . train_df_extended[[&quot;sepal width (cm)&quot;, &quot;target&quot;]].boxplot(by=&#39;target&#39;) plt.tight_layout(pad=3, h_pad=1) plt.xlabel(&quot;class&quot;) plt.ylabel(&quot;cm&quot;) plt.show() . train_df_extended[[&quot;petal length (cm)&quot;, &quot;target&quot;]].boxplot(by=&#39;target&#39;) plt.tight_layout(pad=3, h_pad=1) plt.xlabel(&quot;class&quot;) plt.ylabel(&quot;cm&quot;) plt.show() . train_df_extended[[&quot;petal width (cm)&quot;, &quot;target&quot;]].boxplot(by=&#39;target&#39;) plt.tight_layout(pad=3, h_pad=1) plt.xlabel(&quot;class&quot;) plt.ylabel(&quot;cm&quot;) plt.show() . train_df_extended.boxplot(by=&#39;target&#39;, figsize=(10, 8)) plt.tight_layout(pad=3, h_pad=1) plt.show() . import seaborn as sns sns.scatterplot(x=&#39;sepal length (cm)&#39;, y=&#39;sepal width (cm)&#39;, hue=&#39;target&#39;, # different colors by group style=&#39;target&#39;, # different shapes by group data=train_df_extended) plt.grid() plt.show() . sns.pairplot(train_df_extended, diag_kind=&#39;kde&#39;, # or hist hue=&quot;target&quot;, palette=&#39;bright&#39;) plt.show() . pd.plotting.scatter_matrix(train_df, c=y_train, figsize=(15, 15), marker=&#39;o&#39;, hist_kwds={&#39;bins&#39;: 20}, s=60, alpha=.8) plt.show() # 보라=0, 파랑=1, 노랑=2 .",
            "url": "https://zeroth-choi.github.io/machine-learning/2020/09/04/Visualizing_Iris_in_Python.html",
            "relUrl": "/2020/09/04/Visualizing_Iris_in_Python.html",
            "date": " • Sep 4, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://zeroth-choi.github.io/machine-learning/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://zeroth-choi.github.io/machine-learning/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://zeroth-choi.github.io/machine-learning/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://zeroth-choi.github.io/machine-learning/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}